using ExcelDna.Integration;
using ExcelDna.Integration.CustomUI;
using Excel = Microsoft.Office.Interop.Excel;
using System.Threading.Tasks;

public class MyExcelAddin
{
    private static Excel.Application _excelApp;

    [ExcelFunction(Description = "Retrieve data based on computeDate and FundKey.")]
    public static object[,] GetData(
        [ExcelArgument(Name = "computeDate", Description = "Date of computation.")] DateTime computeDate,
        [ExcelArgument(Name = "FundKey", Description = "Key for the fund.")] string fundKey,
        [ExcelArgument(Name = "Destination", Description = "Destination cell for writing the data.")] string destination)
    {
        Task<object[,]> getDataTask = Task.Run(() => GetDataAsync(computeDate, fundKey, destination));
        getDataTask.ConfigureAwait(false);

        return getDataTask.Result;
    }

    private static async Task<object[,]> GetDataAsync(DateTime computeDate, string fundKey, string destination)
    {
        try
        {
            // Votre code pour récupérer les données en fonction de computeDate et FundKey
            DataTable dataTable = await GetDataTableAsync(computeDate, fundKey);

            // Convertir le DataTable en une matrice à deux dimensions
            int rows = dataTable.Rows.Count;
            int columns = dataTable.Columns.Count;
            object[,] data = new object[rows, columns];

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < columns; j++)
                {
                    data[i, j] = dataTable.Rows[i][j];
                }
            }

            // Écrire les données dans Excel à l'emplacement spécifié par l'utilisateur
            await WriteDataToExcelAsync(data, destination);

            return data;
        }
        catch (Exception ex)
        {
            // Remonter l'erreur à l'utilisateur en tant que valeur d'erreur Excel
            return ExcelError.ExcelErrorValue;
        }
    }

    // Méthode asynchrone pour obtenir un DataTable
    private static async Task<DataTable> GetDataTableAsync(DateTime computeDate, string fundKey)
    {
        // Votre code pour récupérer les données réelles
        // ...

        // Exemple de levée d'une exception pour simuler une erreur
        throw new Exception("Une erreur s'est produite lors de la récupération des données.");
    }

    // Méthode asynchrone pour écrire les données dans Excel à l'emplacement spécifié
    private static async Task WriteDataToExcelAsync(object[,] data, string destination)
    {
        if (_excelApp == null)
        {
            _excelApp = (Excel.Application)ExcelDnaUtil.Application;
        }

        await Task.Run(() =>
        {
            Excel.Range range = _excelApp.Range[destination];
            range.Resize[data.GetLength(0), data.GetLength(1)].Value = data;
        });
    }
}
