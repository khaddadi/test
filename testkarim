[ExcelFunction(Description = "Retrieve data based on list of computeDates and FundKey.")]
public static object[,] GetData(
    [ExcelArgument(Name = "computeDates", Description = "List of computation dates.")] ExcelReference computeDatesRef,
    [ExcelArgument(Name = "FundKey", Description = "Key for the fund.")] string fundKey,
    [ExcelArgument(Name = "Destination", Description = "Destination cell for writing the data.")] string destination)
{
    if (!ExcelAsyncUtil.IsCalledFromExcel)
    {
        // La fonction est appelée en dehors d'Excel, exécution synchrone
        object[,] computeDatesArray = (object[,])computeDatesRef.GetValue();
        ProcessGetData(computeDatesArray, fundKey, destination);
        return computeDatesArray;
    }
    else
    {
        // La fonction est appelée depuis Excel, exécution asynchrone avec matrice volatile
        return ExcelAsyncUtil.Run("GetData", new object[] { computeDatesRef, fundKey, destination }, () =>
        {
            object[,] computeDatesArray = (object[,])computeDatesRef.GetValue();
            ProcessGetData(computeDatesArray, fundKey, destination);
            return computeDatesArray;
        });
    }
}

private static void ProcessGetData(object[,] computeDatesArray, string fundKey, string destination)
{
    // Votre code pour traiter les données en fonction de la matrice de dates et du FundKey
    // ...
}

[ExcelFunction(Description = "Retrieve registered portfolios based on computeDate.")]
public static object[,] GetRegisteredPortfolios(
    [ExcelArgument(Name = "computeDate", Description = "Date of computation.")] DateTime computeDate)
{
    if (!ExcelAsyncUtil.IsCalledFromExcel)
    {
        // La fonction est appelée en dehors d'Excel, exécution synchrone
        return ProcessGetRegisteredPortfolios(computeDate);
    }
    else
    {
        // La fonction est appelée depuis Excel, exécution asynchrone avec matrice volatile
        return ExcelAsyncUtil.Run("GetRegisteredPortfolios", new object[] { computeDate }, () =>
        {
            return ProcessGetRegisteredPortfolios(computeDate);
        });
    }
}

private static object[,] ProcessGetRegisteredPortfolios(DateTime computeDate)
{
    // Votre code pour récupérer les portefeuilles enregistrés en fonction de computeDate
    List<string> portfolios = GetRegisteredPortfolios(computeDate);

    // Convertir la liste de portefeuilles en une matrice à deux dimensions
    int rows = portfolios.Count;
    int columns = 1; // Une seule colonne pour les noms de portefeuilles
    object[,] data = new object[rows, columns];

    for (int i = 0; i < rows; i++)
    {
        data[i, 0] = portfolios[i];
    }

    return data;
}
